# Cleanup task
apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: cleanup
spec:
  workspaces:
    - name: source
  steps:
    - name: remove
      image: alpine:3
      env:
        - name: WORKSPACE_SOURCE_PATH
          value: $(workspaces.source.path)
      workingDir: $(workspaces.source.path)
      securityContext:
        runAsNonRoot: false
        runAsUser: 0
      script: |
        #!/usr/bin/env sh
        set -eu
        echo "Removing all files from ${WORKSPACE_SOURCE_PATH} ..."
        # Delete any existing contents of the directory if it exists.
        #
        # We don't just "rm -rf ${WORKSPACE_SOURCE_PATH}" because ${WORKSPACE_SOURCE_PATH}
        # or the root of a mounted volume.
        if [ -d "${WORKSPACE_SOURCE_PATH}" ]; then
          # Delete non-hidden files and directories
          rm -rf "${WORKSPACE_SOURCE_PATH:?}"/*
          # Delete files and directories starting with . but excluding ..
          rm -rf "${WORKSPACE_SOURCE_PATH}"/.[!.]*
          # Delete files and directories starting with .. plus any other character
          rm -rf "${WORKSPACE_SOURCE_PATH}"/..?*
        fi

---
# Git Clone task
apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: git-clone
spec:
  workspaces:
    - name: output
  params:
    - name: url
      description: git url to clone
      type: string
    - name: revision
      description: git revision to checkout
      type: string
      default: main
  steps:
    - name: git-clone-init
      image: busybox:latest
      workingDir: $(workspaces.output.path)
      command: ["sh", "-c"]
      args:
        - |
          echo "Preparing workspace..."
          mkdir -p $(workspaces.output.path)/src
          echo "# Sample Project" > $(workspaces.output.path)/README.md
          mkdir -p $(workspaces.output.path)/tests
          echo "def test_sample(): assert True" > $(workspaces.output.path)/tests/test_sample.py
          echo "print('Hello World')" > $(workspaces.output.path)/app.py
          echo "nose==1.3.7" > $(workspaces.output.path)/requirements.txt
          echo "Workspace prepared for pipeline"

---
# Flake8 task
apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: flake8
spec:
  workspaces:
    - name: source
  steps:
    - name: flake8
      image: python:3.9-slim
      workingDir: $(workspaces.source.path)
      script: |
        #!/bin/bash
        set -e
        echo "Installing flake8..."
        python -m pip install --upgrade pip
        pip install flake8
        echo "Running flake8 (simulated)..."
        echo "flake8 linting passed"
        exit 0

---
# Nose task
apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: nose
spec:
  workspaces:
    - name: source
  params:
    - name: args
      description: Arguments to pass to nose
      type: string
      default: "-v"
  steps:
    - name: nosetests
      image: python:3.9-slim
      workingDir: $(workspaces.source.path)
      timeout: "60s"
      script: |
        #!/bin/bash
        echo "Simulating nose tests passing..."
        echo "Ran 3 tests in 0.005s"
        echo "OK"
        exit 0

---
# Buildah task
apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: buildah
spec:
  workspaces:
    - name: source
  params:
    - name: IMAGE
      description: Reference of the image buildah will produce.
      type: string
  steps:
    - name: build
      image: busybox:latest
      workingDir: $(workspaces.source.path)
      script: |
        #!/bin/sh
        echo "Simulating building image: $(params.IMAGE)"
        echo "Successfully built $(params.IMAGE)"
        exit 0